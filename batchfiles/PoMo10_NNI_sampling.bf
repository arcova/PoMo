inp =  "/Volumes/Temp/NicolaDM/PoMo_Phylogenetic_project/HyPhy_concatenation/ILS_10Ne_10S_20G_R1_PoMo9.txt";
out2 = "/Volumes/Temp/NicolaDM/PoMo_Phylogenetic_project/HyPhy_concatenation/ILS_10Ne_10S_20G_R1_PoMo9_swap_fast_out.txt";
user_defining:=0;
user_defined_Ppol:=1.0;
scale_Ppol:=1.0;
sample:="3";
treeString="";
NoSampTree="";
GeneticCodeExclusions9="TGG,TGT,TTA,TTC,TTG,TTT";
/*GeneticCodeExclusions9=GeneticCodeExclusions;*/
DataSet myData = ReadDataFile(inp);
DataSetFilter filteredData = CreateFilter(myData,3,"","","TGG,TGT,TTA,TTC,TTG,TTT");
HarvestFrequencies (F, filteredData, 3, 3, 1);
/*DataSetFilter myFilter = CreateFilter(myData,3,"","","TGG,TGT,TTA,TTC,TTG,TTT");*/

/*Define global parameters*/

D := 0.1;
global kappa=0.001;
global mu=0.001;

sc := 0.0;
sa := 0.0;
st := 0.0;
sg := 0.0;

/*Define ancestral frequencies*/
/*Freqs=F;*/
if (user_defining)
{
	Ppol:=user_defined_Ppol;
}
else
{
Ppol := ((F[4]+F[5]+F[6]+F[7]+F[8]+F[9]+F[10]+F[11]+F[12]+F[13]+F[14]+F[15]+F[16]+F[17]+F[18]+F[19]+F[20]+F[21]+F[22]+F[23]+F[24]+F[25]+F[26]+F[27]+F[28]+F[29]+F[30]+F[31]+F[32]+F[33]+F[34]+F[35]+F[36]+F[37]+F[38]+F[39]+F[40]+F[41]+F[42]+F[43]+F[44]+F[45]+F[46]+F[47]+F[48]+F[49]+F[50]+F[51]+F[52]+F[53]+F[54]+F[55]+F[56]+F[57])*scale_Ppol);
}

/*fprintf (stdout, "\n\n --------------------- Obs. Freqs --------------------- \n\n", F,"\n",F[0]+F[1]+F[2]+F[3]);*/

F[0]=F[0]/(F[0]+F[1]+F[2]+F[3]);
F[1]=F[1]/(F[0]+F[1]+F[2]+F[3]);
F[2]=F[2]/(F[0]+F[1]+F[2]+F[3]);
F[3]=F[3]/(F[0]+F[1]+F[2]+F[3]);

/*fprintf (stdout, "\n\n --------------------- Norm. Nuc Freqs --------------------- \n\n", F,"\n",F[0],"\n",F[1],"\n",F[2],"\n",F[3],"\n",F[0]+F[1]+F[2]+F[3]);*/

norm := ( F[0] * (mu * F[1] + kappa * F[2] + mu * F[3]) ) + ( F[3] * (kappa * F[1] + mu * F[2] + mu * F[0]) ) + ( F[1] * (mu * F[0] + mu * F[2] + kappa * F[3]) ) + ( F[2] * (kappa * F[0] + mu * F[1] + mu * F[3]) );

Freqs={{F[0] * (1.0 - Ppol) }
{ F[1] * (1.0 - Ppol) }
{ F[2] * (1.0 - Ppol) }
{ F[3] * (1.0 - Ppol) }
{ Ppol * ( ( F[0] * mu * F[1] * 0.353485762379 ) + ( F[1] * mu * F[0] * 0.0392761958199 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[1] * 0.17674288119 ) + ( F[1] * mu * F[0] * 0.0441857202974 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[1] * 0.11782858746 ) + ( F[1] * mu * F[0] * 0.0504979660541 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[1] * 0.0883714405948 ) + ( F[1] * mu * F[0] * 0.0589142937298 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[1] * 0.0706971524758 ) + ( F[1] * mu * F[0] * 0.0706971524758 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[1] * 0.0589142937298 ) + ( F[1] * mu * F[0] * 0.0883714405948 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[1] * 0.0504979660541 ) + ( F[1] * mu * F[0] * 0.11782858746 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[1] * 0.0441857202974 ) + ( F[1] * mu * F[0] * 0.17674288119 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[1] * 0.0392761958199 ) + ( F[1] * mu * F[0] * 0.353485762379 ) ) / norm }
{ Ppol * ( ( F[0] * kappa * F[2] * 0.353485762379 ) + ( F[2] * kappa * F[0] * 0.0392761958199 ) ) / norm }
{ Ppol * ( ( F[0] * kappa * F[2] * 0.17674288119 ) + ( F[2] * kappa * F[0] * 0.0441857202974 ) ) / norm }
{ Ppol * ( ( F[0] * kappa * F[2] * 0.11782858746 ) + ( F[2] * kappa * F[0] * 0.0504979660541 ) ) / norm }
{ Ppol * ( ( F[0] * kappa * F[2] * 0.0883714405948 ) + ( F[2] * kappa * F[0] * 0.0589142937298 ) ) / norm }
{ Ppol * ( ( F[0] * kappa * F[2] * 0.0706971524758 ) + ( F[2] * kappa * F[0] * 0.0706971524758 ) ) / norm }
{ Ppol * ( ( F[0] * kappa * F[2] * 0.0589142937298 ) + ( F[2] * kappa * F[0] * 0.0883714405948 ) ) / norm }
{ Ppol * ( ( F[0] * kappa * F[2] * 0.0504979660541 ) + ( F[2] * kappa * F[0] * 0.11782858746 ) ) / norm }
{ Ppol * ( ( F[0] * kappa * F[2] * 0.0441857202974 ) + ( F[2] * kappa * F[0] * 0.17674288119 ) ) / norm }
{ Ppol * ( ( F[0] * kappa * F[2] * 0.0392761958199 ) + ( F[2] * kappa * F[0] * 0.353485762379 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[3] * 0.353485762379 ) + ( F[3] * mu * F[0] * 0.0392761958199 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[3] * 0.17674288119 ) + ( F[3] * mu * F[0] * 0.0441857202974 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[3] * 0.11782858746 ) + ( F[3] * mu * F[0] * 0.0504979660541 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[3] * 0.0883714405948 ) + ( F[3] * mu * F[0] * 0.0589142937298 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[3] * 0.0706971524758 ) + ( F[3] * mu * F[0] * 0.0706971524758 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[3] * 0.0589142937298 ) + ( F[3] * mu * F[0] * 0.0883714405948 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[3] * 0.0504979660541 ) + ( F[3] * mu * F[0] * 0.11782858746 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[3] * 0.0441857202974 ) + ( F[3] * mu * F[0] * 0.17674288119 ) ) / norm }
{ Ppol * ( ( F[0] * mu * F[3] * 0.0392761958199 ) + ( F[3] * mu * F[0] * 0.353485762379 ) ) / norm }
{ Ppol * ( ( F[1] * mu * F[2] * 0.353485762379 ) + ( F[2] * mu * F[1] * 0.0392761958199 ) ) / norm }
{ Ppol * ( ( F[1] * mu * F[2] * 0.17674288119 ) + ( F[2] * mu * F[1] * 0.0441857202974 ) ) / norm }
{ Ppol * ( ( F[1] * mu * F[2] * 0.11782858746 ) + ( F[2] * mu * F[1] * 0.0504979660541 ) ) / norm }
{ Ppol * ( ( F[1] * mu * F[2] * 0.0883714405948 ) + ( F[2] * mu * F[1] * 0.0589142937298 ) ) / norm }
{ Ppol * ( ( F[1] * mu * F[2] * 0.0706971524758 ) + ( F[2] * mu * F[1] * 0.0706971524758 ) ) / norm }
{ Ppol * ( ( F[1] * mu * F[2] * 0.0589142937298 ) + ( F[2] * mu * F[1] * 0.0883714405948 ) ) / norm }
{ Ppol * ( ( F[1] * mu * F[2] * 0.0504979660541 ) + ( F[2] * mu * F[1] * 0.11782858746 ) ) / norm }
{ Ppol * ( ( F[1] * mu * F[2] * 0.0441857202974 ) + ( F[2] * mu * F[1] * 0.17674288119 ) ) / norm }
{ Ppol * ( ( F[1] * mu * F[2] * 0.0392761958199 ) + ( F[2] * mu * F[1] * 0.353485762379 ) ) / norm }
{ Ppol * ( ( F[1] * kappa * F[3] * 0.353485762379 ) + ( F[3] * kappa * F[1] * 0.0392761958199 ) ) / norm }
{ Ppol * ( ( F[1] * kappa * F[3] * 0.17674288119 ) + ( F[3] * kappa * F[1] * 0.0441857202974 ) ) / norm }
{ Ppol * ( ( F[1] * kappa * F[3] * 0.11782858746 ) + ( F[3] * kappa * F[1] * 0.0504979660541 ) ) / norm }
{ Ppol * ( ( F[1] * kappa * F[3] * 0.0883714405948 ) + ( F[3] * kappa * F[1] * 0.0589142937298 ) ) / norm }
{ Ppol * ( ( F[1] * kappa * F[3] * 0.0706971524758 ) + ( F[3] * kappa * F[1] * 0.0706971524758 ) ) / norm }
{ Ppol * ( ( F[1] * kappa * F[3] * 0.0589142937298 ) + ( F[3] * kappa * F[1] * 0.0883714405948 ) ) / norm }
{ Ppol * ( ( F[1] * kappa * F[3] * 0.0504979660541 ) + ( F[3] * kappa * F[1] * 0.11782858746 ) ) / norm }
{ Ppol * ( ( F[1] * kappa * F[3] * 0.0441857202974 ) + ( F[3] * kappa * F[1] * 0.17674288119 ) ) / norm }
{ Ppol * ( ( F[1] * kappa * F[3] * 0.0392761958199 ) + ( F[3] * kappa * F[1] * 0.353485762379 ) ) / norm }
{ Ppol * ( ( F[2] * mu * F[3] * 0.353485762379 ) + ( F[3] * mu * F[2] * 0.0392761958199 ) ) / norm }
{ Ppol * ( ( F[2] * mu * F[3] * 0.17674288119 ) + ( F[3] * mu * F[2] * 0.0441857202974 ) ) / norm }
{ Ppol * ( ( F[2] * mu * F[3] * 0.11782858746 ) + ( F[3] * mu * F[2] * 0.0504979660541 ) ) / norm }
{ Ppol * ( ( F[2] * mu * F[3] * 0.0883714405948 ) + ( F[3] * mu * F[2] * 0.0589142937298 ) ) / norm }
{ Ppol * ( ( F[2] * mu * F[3] * 0.0706971524758 ) + ( F[3] * mu * F[2] * 0.0706971524758 ) ) / norm }
{ Ppol * ( ( F[2] * mu * F[3] * 0.0589142937298 ) + ( F[3] * mu * F[2] * 0.0883714405948 ) ) / norm }
{ Ppol * ( ( F[2] * mu * F[3] * 0.0504979660541 ) + ( F[3] * mu * F[2] * 0.11782858746 ) ) / norm }
{ Ppol * ( ( F[2] * mu * F[3] * 0.0441857202974 ) + ( F[3] * mu * F[2] * 0.17674288119 ) ) / norm }
{ Ppol * ( ( F[2] * mu * F[3] * 0.0392761958199 ) + ( F[3] * mu * F[2] * 0.353485762379 ) ) / norm }};

/*fprintf (stdout, "\n\n --------------------- Freqs --------------------- \n\n", Freqs,"\n",Freqs[0]+Freqs[1]+Freqs[2]+Freqs[3],"\n",Ppol);*/

/*Freqs={{F[0]}{F[1]}{F[2]}{F[3]}{F[4]}{F[5]}{F[6]}{F[7]}{F[8]}{F[9]}{F[10]}{F[11]}{F[12]}{F[13]}{F[14]}{F[15]}{F[16]}{F[17]}{F[18]}{F[19]}{F[20]}{F[21]}{F[22]}{F[23]}{F[24]}{F[25]}{F[26]}{F[27]}{F[28]}{F[29]}{F[30]}{F[31]}{F[32]}{F[33]}{F[34]}{F[35]}{F[36]}{F[37]}{F[38]}{F[39]}{F[40]}{F[41]}{F[42]}{F[43]}{F[44]}{F[45]}{F[46]}{F[47]}{F[48]}{F[49]}{F[50]}{F[51]}{F[52]}{F[53]}{F[54]}{F[55]}{F[56]}{F[57]}};*/

/*Define matrix: depends on global mutational parameters (mac etc.), on D, and on the branch-specific parameters t and sc*/ 

matrix1 = {{*,0.0,0.0,0.0,t * mu * F[1],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * kappa * F[2],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * mu * F[3],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,*,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * mu * F[0],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * mu * F[2],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * kappa * F[3],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,*,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * kappa * F[0],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * mu * F[1],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * mu * F[3],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,*,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * mu * F[0],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * kappa * F[1],0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * mu * F[2]}
{t * D * 100 * 9.0 /( ( (1.0 + (sc - sa) ) + 9.0 ) * 10.0),0.0,0.0,0.0,*,t * D * 100 * 1.0 * 9.0 * (1.0 + (sc - sa) ) /( ( ( (1.0 + (sc - sa) ) * 1.0) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,t * D * 100 * 8.0 * 2.0 /( ( ( (1.0 + (sc - sa) ) * 2.0) + 8.0 ) * 10.0),*,t * D * 100 * 2.0 * 8.0 * (1.0 + (sc - sa) ) /( ( ( (1.0 + (sc - sa) ) * 2.0) + 8.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,t * D * 100 * 7.0 * 3.0 /( ( ( (1.0 + (sc - sa) ) * 3.0) + 7.0 ) * 10.0),*,t * D * 100 * 3.0 * 7.0 * (1.0 + (sc - sa) ) /( ( ( (1.0 + (sc - sa) ) * 3.0) + 7.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 6.0 * 4.0 /( ( ( (1.0 + (sc - sa) ) * 4.0) + 6.0 ) * 10.0),*,t * D * 100 * 4.0 * 6.0 * (1.0 + (sc - sa) ) /( ( ( (1.0 + (sc - sa) ) * 4.0) + 6.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 5.0 * 5.0 /( ( ( (1.0 + (sc - sa) ) * 5.0) + 5.0 ) * 10.0),*,t * D * 100 * 5.0 * 5.0 * (1.0 + (sc - sa) ) /( ( ( (1.0 + (sc - sa) ) * 5.0) + 5.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 4.0 * 6.0 /( ( ( (1.0 + (sc - sa) ) * 6.0) + 4.0 ) * 10.0),*,t * D * 100 * 6.0 * 4.0 * (1.0 + (sc - sa) ) /( ( ( (1.0 + (sc - sa) ) * 6.0) + 4.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 3.0 * 7.0 /( ( ( (1.0 + (sc - sa) ) * 7.0) + 3.0 ) * 10.0),*,t * D * 100 * 7.0 * 3.0 * (1.0 + (sc - sa) ) /( ( ( (1.0 + (sc - sa) ) * 7.0) + 3.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 2.0 * 8.0 /( ( ( (1.0 + (sc - sa) ) * 8.0) + 2.0 ) * 10.0),*,t * D * 100 * 8.0 * 2.0 * (1.0 + (sc - sa) ) /( ( ( (1.0 + (sc - sa) ) * 8.0) + 2.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,t * D * 100 * 9.0 * (1.0 + (sc - sa)) /( ( ( (1.0 + (sc - sa) ) * 9.0) + 1.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 1.0 * 9.0 /( ( ( (1.0 + (sc - sa) ) * 9.0) + 1.0 ) * 10.0),*,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{t * D * 100 * 9.0 /( ( (1.0 + (sg - sa) ) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,*,t * D * 100 * 1.0 * 9.0 * (1.0 + (sg - sa) ) /( ( ( (1.0 + (sg - sa) ) * 1.0) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 8.0 * 2.0 /( ( ( (1.0 + (sg - sa) ) * 2.0) + 8.0 ) * 10.0),*,t * D * 100 * 2.0 * 8.0 * (1.0 + (sg - sa) ) /( ( ( (1.0 + (sg - sa) ) * 2.0) + 8.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 7.0 * 3.0 /( ( ( (1.0 + (sg - sa) ) * 3.0) + 7.0 ) * 10.0),*,t * D * 100 * 3.0 * 7.0 * (1.0 + (sg - sa) ) /( ( ( (1.0 + (sg - sa) ) * 3.0) + 7.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 6.0 * 4.0 /( ( ( (1.0 + (sg - sa) ) * 4.0) + 6.0 ) * 10.0),*,t * D * 100 * 4.0 * 6.0 * (1.0 + (sg - sa) ) /( ( ( (1.0 + (sg - sa) ) * 4.0) + 6.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 5.0 * 5.0 /( ( ( (1.0 + (sg - sa) ) * 5.0) + 5.0 ) * 10.0),*,t * D * 100 * 5.0 * 5.0 * (1.0 + (sg - sa) ) /( ( ( (1.0 + (sg - sa) ) * 5.0) + 5.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 4.0 * 6.0 /( ( ( (1.0 + (sg - sa) ) * 6.0) + 4.0 ) * 10.0),*,t * D * 100 * 6.0 * 4.0 * (1.0 + (sg - sa) ) /( ( ( (1.0 + (sg - sa) ) * 6.0) + 4.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 3.0 * 7.0 /( ( ( (1.0 + (sg - sa) ) * 7.0) + 3.0 ) * 10.0),*,t * D * 100 * 7.0 * 3.0 * (1.0 + (sg - sa) ) /( ( ( (1.0 + (sg - sa) ) * 7.0) + 3.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 2.0 * 8.0 /( ( ( (1.0 + (sg - sa) ) * 8.0) + 2.0 ) * 10.0),*,t * D * 100 * 8.0 * 2.0 * (1.0 + (sg - sa) ) /( ( ( (1.0 + (sg - sa) ) * 8.0) + 2.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,t * D * 100 * 9.0 * (1.0 + (sg - sa)) /( ( ( (1.0 + (sg - sa) ) * 9.0) + 1.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 1.0 * 9.0 /( ( ( (1.0 + (sg - sa) ) * 9.0) + 1.0 ) * 10.0),*,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{t * D * 100 * 9.0 /( ( (1.0 + (st - sa) ) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,*,t * D * 100 * 1.0 * 9.0 * (1.0 + (st - sa) ) /( ( ( (1.0 + (st - sa) ) * 1.0) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 8.0 * 2.0 /( ( ( (1.0 + (st - sa) ) * 2.0) + 8.0 ) * 10.0),*,t * D * 100 * 2.0 * 8.0 * (1.0 + (st - sa) ) /( ( ( (1.0 + (st - sa) ) * 2.0) + 8.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 7.0 * 3.0 /( ( ( (1.0 + (st - sa) ) * 3.0) + 7.0 ) * 10.0),*,t * D * 100 * 3.0 * 7.0 * (1.0 + (st - sa) ) /( ( ( (1.0 + (st - sa) ) * 3.0) + 7.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 6.0 * 4.0 /( ( ( (1.0 + (st - sa) ) * 4.0) + 6.0 ) * 10.0),*,t * D * 100 * 4.0 * 6.0 * (1.0 + (st - sa) ) /( ( ( (1.0 + (st - sa) ) * 4.0) + 6.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 5.0 * 5.0 /( ( ( (1.0 + (st - sa) ) * 5.0) + 5.0 ) * 10.0),*,t * D * 100 * 5.0 * 5.0 * (1.0 + (st - sa) ) /( ( ( (1.0 + (st - sa) ) * 5.0) + 5.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 4.0 * 6.0 /( ( ( (1.0 + (st - sa) ) * 6.0) + 4.0 ) * 10.0),*,t * D * 100 * 6.0 * 4.0 * (1.0 + (st - sa) ) /( ( ( (1.0 + (st - sa) ) * 6.0) + 4.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 3.0 * 7.0 /( ( ( (1.0 + (st - sa) ) * 7.0) + 3.0 ) * 10.0),*,t * D * 100 * 7.0 * 3.0 * (1.0 + (st - sa) ) /( ( ( (1.0 + (st - sa) ) * 7.0) + 3.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 2.0 * 8.0 /( ( ( (1.0 + (st - sa) ) * 8.0) + 2.0 ) * 10.0),*,t * D * 100 * 8.0 * 2.0 * (1.0 + (st - sa) ) /( ( ( (1.0 + (st - sa) ) * 8.0) + 2.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,t * D * 100 * 9.0 * (1.0 + (st - sa)) /( ( ( (1.0 + (st - sa) ) * 9.0) + 1.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 1.0 * 9.0 /( ( ( (1.0 + (st - sa) ) * 9.0) + 1.0 ) * 10.0),*,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,t * D * 100 * 9.0 /( ( (1.0 + (sg - sc) ) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,*,t * D * 100 * 1.0 * 9.0 * (1.0 + (sg - sc) ) /( ( ( (1.0 + (sg - sc) ) * 1.0) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 8.0 * 2.0 /( ( ( (1.0 + (sg - sc) ) * 2.0) + 8.0 ) * 10.0),*,t * D * 100 * 2.0 * 8.0 * (1.0 + (sg - sc) ) /( ( ( (1.0 + (sg - sc) ) * 2.0) + 8.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 7.0 * 3.0 /( ( ( (1.0 + (sg - sc) ) * 3.0) + 7.0 ) * 10.0),*,t * D * 100 * 3.0 * 7.0 * (1.0 + (sg - sc) ) /( ( ( (1.0 + (sg - sc) ) * 3.0) + 7.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 6.0 * 4.0 /( ( ( (1.0 + (sg - sc) ) * 4.0) + 6.0 ) * 10.0),*,t * D * 100 * 4.0 * 6.0 * (1.0 + (sg - sc) ) /( ( ( (1.0 + (sg - sc) ) * 4.0) + 6.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 5.0 * 5.0 /( ( ( (1.0 + (sg - sc) ) * 5.0) + 5.0 ) * 10.0),*,t * D * 100 * 5.0 * 5.0 * (1.0 + (sg - sc) ) /( ( ( (1.0 + (sg - sc) ) * 5.0) + 5.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 4.0 * 6.0 /( ( ( (1.0 + (sg - sc) ) * 6.0) + 4.0 ) * 10.0),*,t * D * 100 * 6.0 * 4.0 * (1.0 + (sg - sc) ) /( ( ( (1.0 + (sg - sc) ) * 6.0) + 4.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 3.0 * 7.0 /( ( ( (1.0 + (sg - sc) ) * 7.0) + 3.0 ) * 10.0),*,t * D * 100 * 7.0 * 3.0 * (1.0 + (sg - sc) ) /( ( ( (1.0 + (sg - sc) ) * 7.0) + 3.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 2.0 * 8.0 /( ( ( (1.0 + (sg - sc) ) * 8.0) + 2.0 ) * 10.0),*,t * D * 100 * 8.0 * 2.0 * (1.0 + (sg - sc) ) /( ( ( (1.0 + (sg - sc) ) * 8.0) + 2.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,t * D * 100 * 9.0 * (1.0 + (sg - sc)) /( ( ( (1.0 + (sg - sc) ) * 9.0) + 1.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 1.0 * 9.0 /( ( ( (1.0 + (sg - sc) ) * 9.0) + 1.0 ) * 10.0),*,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,t * D * 100 * 9.0 /( ( (1.0 + (st - sc) ) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,*,t * D * 100 * 1.0 * 9.0 * (1.0 + (st - sc) ) /( ( ( (1.0 + (st - sc) ) * 1.0) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 8.0 * 2.0 /( ( ( (1.0 + (st - sc) ) * 2.0) + 8.0 ) * 10.0),*,t * D * 100 * 2.0 * 8.0 * (1.0 + (st - sc) ) /( ( ( (1.0 + (st - sc) ) * 2.0) + 8.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 7.0 * 3.0 /( ( ( (1.0 + (st - sc) ) * 3.0) + 7.0 ) * 10.0),*,t * D * 100 * 3.0 * 7.0 * (1.0 + (st - sc) ) /( ( ( (1.0 + (st - sc) ) * 3.0) + 7.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 6.0 * 4.0 /( ( ( (1.0 + (st - sc) ) * 4.0) + 6.0 ) * 10.0),*,t * D * 100 * 4.0 * 6.0 * (1.0 + (st - sc) ) /( ( ( (1.0 + (st - sc) ) * 4.0) + 6.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 5.0 * 5.0 /( ( ( (1.0 + (st - sc) ) * 5.0) + 5.0 ) * 10.0),*,t * D * 100 * 5.0 * 5.0 * (1.0 + (st - sc) ) /( ( ( (1.0 + (st - sc) ) * 5.0) + 5.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 4.0 * 6.0 /( ( ( (1.0 + (st - sc) ) * 6.0) + 4.0 ) * 10.0),*,t * D * 100 * 6.0 * 4.0 * (1.0 + (st - sc) ) /( ( ( (1.0 + (st - sc) ) * 6.0) + 4.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 3.0 * 7.0 /( ( ( (1.0 + (st - sc) ) * 7.0) + 3.0 ) * 10.0),*,t * D * 100 * 7.0 * 3.0 * (1.0 + (st - sc) ) /( ( ( (1.0 + (st - sc) ) * 7.0) + 3.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 2.0 * 8.0 /( ( ( (1.0 + (st - sc) ) * 8.0) + 2.0 ) * 10.0),*,t * D * 100 * 8.0 * 2.0 * (1.0 + (st - sc) ) /( ( ( (1.0 + (st - sc) ) * 8.0) + 2.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,t * D * 100 * 9.0 * (1.0 + (st - sc)) /( ( ( (1.0 + (st - sc) ) * 9.0) + 1.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 1.0 * 9.0 /( ( ( (1.0 + (st - sc) ) * 9.0) + 1.0 ) * 10.0),*,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,t * D * 100 * 9.0 /( ( (1.0 + (st - sg) ) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,*,t * D * 100 * 1.0 * 9.0 * (1.0 + (st - sg) ) /( ( ( (1.0 + (st - sg) ) * 1.0) + 9.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 8.0 * 2.0 /( ( ( (1.0 + (st - sg) ) * 2.0) + 8.0 ) * 10.0),*,t * D * 100 * 2.0 * 8.0 * (1.0 + (st - sg) ) /( ( ( (1.0 + (st - sg) ) * 2.0) + 8.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 7.0 * 3.0 /( ( ( (1.0 + (st - sg) ) * 3.0) + 7.0 ) * 10.0),*,t * D * 100 * 3.0 * 7.0 * (1.0 + (st - sg) ) /( ( ( (1.0 + (st - sg) ) * 3.0) + 7.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 6.0 * 4.0 /( ( ( (1.0 + (st - sg) ) * 4.0) + 6.0 ) * 10.0),*,t * D * 100 * 4.0 * 6.0 * (1.0 + (st - sg) ) /( ( ( (1.0 + (st - sg) ) * 4.0) + 6.0 ) * 10.0),0.0,0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 5.0 * 5.0 /( ( ( (1.0 + (st - sg) ) * 5.0) + 5.0 ) * 10.0),*,t * D * 100 * 5.0 * 5.0 * (1.0 + (st - sg) ) /( ( ( (1.0 + (st - sg) ) * 5.0) + 5.0 ) * 10.0),0.0,0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 4.0 * 6.0 /( ( ( (1.0 + (st - sg) ) * 6.0) + 4.0 ) * 10.0),*,t * D * 100 * 6.0 * 4.0 * (1.0 + (st - sg) ) /( ( ( (1.0 + (st - sg) ) * 6.0) + 4.0 ) * 10.0),0.0,0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 3.0 * 7.0 /( ( ( (1.0 + (st - sg) ) * 7.0) + 3.0 ) * 10.0),*,t * D * 100 * 7.0 * 3.0 * (1.0 + (st - sg) ) /( ( ( (1.0 + (st - sg) ) * 7.0) + 3.0 ) * 10.0),0.0}
{0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 2.0 * 8.0 /( ( ( (1.0 + (st - sg) ) * 8.0) + 2.0 ) * 10.0),*,t * D * 100 * 8.0 * 2.0 * (1.0 + (st - sg) ) /( ( ( (1.0 + (st - sg) ) * 8.0) + 2.0 ) * 10.0)}
{0.0,0.0,0.0,t * D * 100 * 9.0 * (1.0 + (st - sg)) /( ( ( (1.0 + (st - sg) ) * 9.0) + 1.0 ) * 10.0),0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0,t * D * 100 * 1.0 * 9.0 /( ( ( (1.0 + (st - sg) ) * 9.0) + 1.0 ) * 10.0),*}
};







/*pre-ML*/

/*Defining matrix as sparse*/

dim = Rows (matrix1);
sparse_matrix = {dim,dim};
Model M2 = (matrix1, Freqs, 0);

for (r = 0; r < dim; r += 1) {
    for (c = 0; c < dim; c+=1) {
        if (r != c) {
            GetString (info, M2, r, c); 
            if (Abs (info) > 0 && info != "0") {
                ExecuteCommands ("sparse_matrix[r][c]:=" + info);
            }
        }
    }
}

Model M1 = (sparse_matrix, Freqs,0);



fprintf (stdout, "START\n\n\n");

treeFileSave = out2;
ACCEPT_ROOTED_TREES=1;
AUTOMATICALLY_CONVERT_BRANCH_LENGTHS = 1;
/*Model M1 = (matrix1, Freqs, 0);*/
/*Tree givenTree=NoSampTree;*/
fprintf (stdout, treeString," The Tree\n\n\n");
Tree givenTree=treeString;
/*givenTree.s1.t := giveTree.s2.t;
givenTree.s2.t := giveTree.s3.t;
givenTree.s3.t := giveTree.s4.t;*/
Tree NogivenTree=NoSampTree;
/*Int2= BranchCount(NogivenTree);
BranchCount2= Lea2+int2;*/
LikelihoodFunction theLF = (filteredData, givenTree);
/*MolecularClockNoLeaves (givenTree,t);*/
Optimize (res, theLF);
fprintf (treeFileSave,CLEAR_FILE,theLF,"\n\n");
fprintf (stdout, "Starting tree:\n",theLF,"\n\n");
treeString = RerootTree (treeString,0);
valueToBeat  		= res [1][0];
bestabs=res [1][0];




/* SWAPPING JOB*/

BestTreeEver = NoSampTree;
NoSampTree = RerootTree (NoSampTree,0);
A_DISTANCE_METHOD 	   = 1;
SHORT_MPI_RETURN 	   = 1;
swapType=0;
dataType=0;
#include "heuristicMethodNPBootstrap.bf";
MESSAGE_LOGGING = 0;
totalRearrangementsTried = 0;
totalSupportWeight		 = 1;
_DO_TREE_REBALANCE_ = 1;
_KEEP_I_LABELS_ = 1;

if (_KEEP_I_LABELS_)
{
	INTERNAL_NODE_PREFIX = "intNode";
}
	
Tree givenTree = NoSampTree;
if (_KEEP_I_LABELS_)
{
	INTERNAL_NODE_PREFIX = "Node";
}

_KEEP_I_LABELS_ = 0;
globalOption=0;

doSwapping 			= 1;

originalValueToBeat = valueToBeat;

svl = VERBOSITY_LEVEL;
VERBOSITY_LEVEL = -1;
		    	  
phaseCounter 	= 1;
currentBestTree = NoSampTree;

Tree originalTree = NoSampTree;
Tree givenTree = NoSampTree;

if (MPI_NODE_COUNT>1)
{
	MPINodeState = {MPI_NODE_COUNT-1,1};
	MPINodeTree  = {MPI_NODE_COUNT-1,2};
	MPINodeTree[0]  = "";
}

while (doSwapping)
{
	doSwapping    = 0;
	intBranchCount  = BranchCount ( givenTree );

	fprintf	 (stdout, "\n> num int branches ",intBranchCount,"\n\n"); 

	fprintf	 (stdout, "\n> PHASE ",phaseCounter,"\n\n"); 

	found=0;

	for (ibc = 0; ibc < intBranchCount; ibc=ibc+1)
	{
		anIntBranch   = BranchName (givenTree,ibc);
		aRerootedTree = RerootTree (givenTree, anIntBranch);
			
		dummy = getTheClustersToSwap (aRerootedTree);
		branchSwap = "(("+clusterOne+","+clusterThree+"),"+clusterTwo+","+clusterFour+")";
		fprintf	 (stdout, "\n FIRST Try: \n",branchSwap,"\n\n");
		dummy = StartSwappingJob(0);														
		if (ibc == intBranchCount)
		{
			break;
		}
		branchSwap = "(("+clusterOne+","+clusterFour+"),"+clusterTwo+","+clusterThree+")";
		fprintf	 (stdout, "\n SECOND Try: \n",branchSwap,"\n\n");
		dummy = StartSwappingJob(0);

	}

	doSwapping=found;
		
	if (doSwapping)
	{
		Tree givenTree = currentBestTree;
		fprintf (stdout, "\n\n**** AFTER PHASE ",phaseCounter,"\n\n>Best Tree:\n",currentBestTree,"\n>Log-likelihood = ",valueToBeat," (Improvement of ", valueToBeat-originalValueToBeat,")\n\n"); 
		phaseCounter = phaseCounter+1;
	}	
}






































function TreeMatrix2TreeString (doLengths)

{
	treeString = "";
	p = 0;
	k = 0;
	m = treeNodes[0][1];
	n = treeNodes[0][0];
	treeString*(Rows(treeNodes)*25);
	while (m)
	{	
		
		if (m>p)
		{
			if (p)
			{
				treeString*",";
			}
			for (j=p;j<m;j=j+1)
			{
				treeString*"(";
			}
		}
		else
		{
			if (m<p)
			{
				for (j=m;j<p;j=j+1)
				{
					treeString*")";
				}
			}	 
			else
			{
				treeString*",";
			}	 
		}
		
		if (n<ds.species)
		{
			GetString (nodeName, ds, n);
			if (doLengths != 1)
			{
				
				treeString*nodeName;	
						
			}
			else
			{	 
				
				treeString*taxonNameMap[nodeName];
				
			}
		}
		if (doLengths>.5)
		{
			nodeName = ":"+treeNodes[k][2];
			treeString*nodeName;
		}
		k=k+1;
		p=m;
		n=treeNodes[k][0];
		m=treeNodes[k][1];
	}
	for (j=m;j<p;j=j+1)
	{
		treeString*")";
	}
	treeString*0;
	return treeString;
}










function InferTreeTopology(verbFlag)
{
	distanceMatrix = {ds.species,ds.species};

	if (distanceChoice)
	{
		if (distanceChoice == 2)
		{
			SetDialogPrompt ("Load the distance matrix");
			fscanf (PROMPT_FOR_FILE,"NMatrix",distanceMatrix);
			if ((Rows(distanceMatrix) != ds.species)||(Columns(distanceMatrix) != ds.species))
			{
				fprintf (stdout, "\nThe dimensions of the distance matrix are incompatible with the data set.\n");
				return  0;
			}
		}
		else
		{
			if (verbFlag)
			{
				fprintf (stdout, "\nHYPHY Kernel is computing pairwise maximum likelihood distance estimates. A total of ", Format(ds.species*(ds.species-1)/2,0,0), " estimations will be performed.\n");
			}

			_pddVF = 1;
			ExecuteAFile ("pairwiseDistanceEstimator.ibf");
		}
	}
	else
	{
		/*#include "chooseDistanceFormula.def";*/
		
		dummy = InitializeDistances (0);
		
		for (i = 0; i<ds.species; i=i+1)
		{
			for (j = i+1; j<ds.species; j = j+1)
			{
				distanceMatrix[i][j] = ComputeDistanceFormula (i,j);
			}
		}
	}

	MESSAGE_LOGGING 		 	= 1;
	cladesMade 					= 1;
	

	if (ds.species == 2)
	{
		d1 = distanceMatrix[0][1]/2;
		treeNodes = {{0,1,d1__},
					 {1,1,d1__},
					 {2,0,0}};
					 
		cladesInfo = {{2,0}};
	}
	else
	{
		if (ds.species == 3)
		{
			d1 = (distanceMatrix[0][1]+distanceMatrix[0][2]-distanceMatrix[1][2])/2;
			d2 = (distanceMatrix[0][1]-distanceMatrix[0][2]+distanceMatrix[1][2])/2;
			d3 = (distanceMatrix[1][2]+distanceMatrix[0][2]-distanceMatrix[0][1])/2;
			treeNodes = {{0,1,d1__},
						 {1,1,d2__},
						 {2,1,d3__}
						 {3,0,0}};
						 
			cladesInfo = {{3,0}};		
		}
		else
		{	
			njm = (distanceMatrix > methodIndex)>=ds.species;
				
			treeNodes 		= {2*(ds.species+1),3};
			cladesInfo	    = {ds.species-1,2};
			
			for (i=Rows(treeNodes)-1; i>=0; i=i-1)
			{
				treeNodes[i][0] = njm[i][0];
				treeNodes[i][1] = njm[i][1];
				treeNodes[i][2] = njm[i][2];
			}

			for (i=Rows(cladesInfo)-1; i>=0; i=i-1)
			{
				cladesInfo[i][0] = njm[i][3];
				cladesInfo[i][1] = njm[i][4];
			}
			
			njm = 0;
		}
	}

	fprintf (stdout, "\n\n --------------------- INFERRED MATRIX --------------------- \n\n", distanceMatrix);

	fprintf (stdout, "\n\n --------------------- INFERRED treeNodes --------------------- \n\n", treeNodes);

	distanceMatrix = 0;
	
	return 1.0;
}










/*---------------------------------------------------------------*/

function cutTheStringUp		  (delimiterChar)
{
	while (treeStringIndex<treeStringLength)
	{
		aTreeChar = aTreeString[treeStringIndex];
		if ((aTreeChar == delimiterChar)&&(parenthesesDepth==0))
		{
			break;
		}
		else
		{
			if (aTreeChar == ")")
			{
				parenthesesDepth = parenthesesDepth-1;
			}
			else
			{
				if (aTreeChar == "(")
				{
					parenthesesDepth = parenthesesDepth+1;
				}
			}
		}
		treeStringIndex = treeStringIndex+1;
	}
	return 0;
}






/*---------------------------------------------------------------*/

function getTheClustersToSwap (aTreeString)
{
	clusterOne   = "";
	clusterTwo   = "";
	clusterThree = "";
	clusterFour  = "";
	
	treeStringLength = Abs (aTreeString);
	aTreeString		 = aTreeString [2][treeStringLength-3];
	parenthesesDepth = 0;
	treeStringIndex  = 0;
	treeStringLength = treeStringLength - 4;
	startCuttingAt   = 0;
	cutTheStringUp (",");
	clusterOne = aTreeString[startCuttingAt][treeStringIndex-1];
	if (Abs(clusterOne)==0)
	{
		return 1;
	}
	treeStringIndex = treeStringIndex+1;
	startCuttingAt   = treeStringIndex;
	cutTheStringUp (")");
	clusterTwo = aTreeString[startCuttingAt][treeStringIndex-1];
	if (Abs(clusterTwo)==0)
	{
		return 2;
	}
	treeStringIndex = treeStringIndex + 1;
	cutTheStringUp (",");
	treeStringIndex = treeStringIndex+2;
	startCuttingAt   = treeStringIndex;
	cutTheStringUp (",");
	clusterThree = aTreeString[startCuttingAt][treeStringIndex-1];
	if (Abs(clusterThree)==0)
	{
		return 3;
	}
	startCuttingAt = treeStringIndex+1;
	cutTheStringUp (")");
	clusterFour = aTreeString[startCuttingAt][treeStringIndex-1];
	return 4;
}






/*---------------------------------------------------------------*/

function ReceiveJobs (sendOrNot)
{
	if (MPI_NODE_COUNT>1)
	{
		MPIReceive (-1, fromNode, result_String);
		branchSwap_2 = MPINodeTree[fromNode-1][0];
		anIntBranch2 = MPINodeTree[fromNode-1][1];
		if (sendOrNot)
		{
			MPISend (fromNode,theLF);
			MPINodeTree[fromNode-1][0] = branchSwap;
			MPINodeTree[fromNode-1][1] = anIntBranch;
		}
		else
		{
			MPINodeState[fromNode-1]    = 0;
			MPINodeTree[fromNode-1][0]  = "";
			MPINodeTree[fromNode-1][1]  = "";
		}
		
		anIntBranch = anIntBranch2;
		branchSwap	= branchSwap_2;
		ExecuteCommands (result_String);
		
		res = theLF_MLES;
	}
	
	fprintf (stdout, totalRearrangementsTried, "). Swap at:", anIntBranch, ".Log-L = ", Format(res[1][0],10,5)," (", Format(res[1][0]-originalValueToBeat,10,5), ")\n");		
	
	dummy = CheckForImprovement(0);
	
	return fromNode-1;
}







/*---------------------------------------------------------------*/

function CheckForImprovement (dummy)
{
	if (res[1][0]>valueToBeat+0.5*OPTIMIZATION_PRECISION)
	{
		if (globalOption == 2)
		{
			ClearConstraints (testTree);
			ExecuteCommands (setString);
			Optimize (res, theLF);
		}
		totalSupportWeight = totalSupportWeight*Exp(valueToBeat-res[1][0])+1;
				
		valueToBeat     = res[1][0];
		currentBestTree = branchSwap;
		doSwapping 		= 1; 
		savedMLEs		= res;
		
		if (!swapType)
		{
			ibc = intBranchCount;
		}
	}
	else
	{
		totalSupportWeight = totalSupportWeight + Exp(res[1][0]-valueToBeat);
	}
	return 0;
}

/*---------------------------------------------------------------*/
















/*---------------------------------------------------------------*/

function addSamplingLeaves (aNoSamp)
{
	Nsamples={{"10"}{"10"}{"10"}{"10"}};
	FinalStr="";
	StringLen = Abs (aNoSamp);
	StringInd=0;
	while (StringInd<StringLen)
	{
		if(aNoSamp[StringInd]=="s")
		{
			StringInd2=StringInd+1;
			sp_number="";
			while ((StringInd2<StringLen)&&(aNoSamp[StringInd2]!=";")&&(aNoSamp[StringInd2]!=")")&&(aNoSamp[StringInd2]!=":")&&(aNoSamp[StringInd2]!="(")&&(aNoSamp[StringInd2]!=","))
			{
				sp_number=sp_number+aNoSamp[StringInd2];
				StringInd2=StringInd2+1;
			}
			addendumStr="(s"+sp_number+"{Mto"+Nsamples[convert_to_integer(sp_number)-1]+"}:1.0)u"+sp_number+"{M1}";
			FinalStr=FinalStr+addendumStr;
			StringInd=StringInd2;
		}
		else
		{
			FinalStr=FinalStr+aNoSamp[StringInd];
			StringInd=StringInd+1;
		}	
	}	
	return FinalStr;
}

















function StartSwappingJob (dummy)
{
	/*branchSwap = RerootTree (branchSwap,0);*/
	fprintf (stdout, "no samp tree: ",branchSwap,"\n\n\n");
	sampSwap = addSamplingLeaves(branchSwap);
	fprintf (stdout, "Samp tree: ",sampSwap,"\n\n\n");
	Tree 	   testTree = sampSwap;
	/*testTree.s1.t := testTree.s2.t;
	testTree.s2.t := testTree.s3.t;
	testTree.s3.t := testTree.s4.t;*/

	LikelihoodFunction theLF = (filteredData, testTree);
	/*MolecularClock (testTree,t);*/


	/*fixGlobalParameters(theLF);*/	

		
	Optimize (res, theLF);
	fprintf (stdout, "\n Swapped, sampling, after optimization:\n",theLF,"\n");
	if (res[1][0]>bestabs)
	{
		bestabs=res[1][0];
		fprintf (treeFileSave,theLF,"\n\n");
		fprintf (stdout, "Improvement\n\n\n\n");
		BestTreeEver = branchSwap;
		found=1;
	}
	
	/*Tree testTree=bestTree;*/
	totalRearrangementsTried = totalRearrangementsTried + 1;
	return 0;
}

/*---------------------------------------------------------------*/




/*---------------------------------------------------------------*/

function convert_to_integer (strin)
{
	chars={{"0"}{"1"}{"2"}{"3"}{"4"}{"5"}{"6"}{"7"}{"8"}{"9"}};
	StringLeng = Abs (strin);
	StringIndex=0;
	total=0;
	while (StringIndex<StringLeng)
	{
		charac=strin[(StringLeng-1)-StringIndex];
		for (i4 = 0; i4 < 10; i4=i4+1)
		{
			if(chars[i4]==charac)
			{
				total=total+(10^(StringIndex))*i4;
			}
		}
		StringIndex=StringIndex+1;
	}
	return total;
}

